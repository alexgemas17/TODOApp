{"version":3,"sources":["components/todoReducer.js","components/TodoListItem.js","components/TodoList.js","components/TodoAddForm.js","Hooks/useForm.js","components/TodoApp.js","index.js"],"names":["todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","index","handleClickTodo","handleDelete","key","className","onClick","desc","TodoList","todos","TodoAddForm","handleAddTodo","initialState","useState","values","setValues","reset","handleInputChange","target","name","value","useForm","description","onSubmit","event","preventDefault","trim","length","newTodo","Date","getTime","placeholder","onChange","init","JSON","parse","localStorage","getItem","TodoApp","useReducer","dispatch","useEffect","setItem","stringify","todoId","ReactDOM","render","document","getElementById"],"mappings":"gMAgBcA,EAAc,WAA2B,IAAzBC,EAAwB,uDAAhB,GAAIC,EAAY,uCAElD,OAASA,EAAOC,MACZ,IAAK,MACD,MAAM,GAAN,mBAAWF,GAAX,CAAkBC,EAAOE,UAE7B,IAAK,SACD,OAAOH,EAAMI,QAAQ,SAAAC,GAAI,OAAIA,EAAKC,KAAOL,EAAOE,WAEpD,IAAK,SACD,OAAOH,EAAMO,KAAM,SAAAF,GAAI,OAAKA,EAAKC,KAAOL,EAAOE,QAApB,YAAC,eAAoCE,GAArC,IAA2CG,MAAOH,EAAKG,OAAQH,KAG9F,QACI,OAAOL,IC5BNS,G,MAAe,SAAC,GAAoD,IAAlDJ,EAAiD,EAAjDA,KAAMK,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,aACzD,OACI,wBACIC,IAAKR,EAAKC,GACVQ,UAAU,mBAEV,uBACIA,UAAS,UAAOT,EAAKG,MAAQ,YAC7BO,QAAU,kBAAMJ,EAAgBN,EAAKC,MAEnCI,EAAQ,EAJd,IAIoBL,EAAKW,MAGzB,4BACIF,UAAU,iBACVC,QAAU,kBAAMH,EAAcP,EAAKC,MAFvC,aCZCW,EAAW,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,MAAOP,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,aAC/C,OACI,wBAAIE,UAAU,+BAENI,EAAMX,KAAK,SAACF,EAAMK,GAAP,OACP,kBAAC,EAAD,CACIG,IAAKH,EACLL,KAAMA,EACNK,MAAOA,EACPC,gBAAiBA,EACjBC,aAAcA,S,OCTzBO,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,ECA3B,WAA0B,IAAxBC,EAAuB,uDAAR,GAAQ,EAEhBC,mBAASD,GAFO,mBAErCE,EAFqC,KAE7BC,EAF6B,KAItCC,EAAQ,WACVD,EAAUH,IAGRK,EAAoB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACzBH,EAAU,2BACHD,GADE,kBAEJI,EAAOC,KAAOD,EAAOE,UAI9B,MAAO,CAAEN,EAAQG,EAAmBD,GDXcK,CAAQ,CACtDC,YAAY,KAL8B,mBAItCA,EAJsC,KAItCA,YAAcL,EAJwB,KAILD,EAJK,KA6B9C,OACI,oCACI,6CACA,6BAEA,0BAAMO,SAzBO,SAACC,GAGlB,GAFAA,EAAMC,mBAEDH,EAAYI,OAAOC,QAAU,GAAlC,CAIA,IAAMC,EAAU,CACZ/B,IAAI,IAAIgC,MAAOC,UACfvB,KAAMe,EACNvB,MAAM,GAIVY,EAAciB,GAGdZ,OASQ,2BACIvB,KAAK,OACLY,UAAU,eACVc,KAAK,cACLY,YAAY,eACZX,MAAOE,EACPU,SAAUf,IAGd,4BACIxB,KAAK,SACLY,UAAU,0CAFd,cEzCV4B,EAAO,WAIT,OAAOC,KAAKC,MAAMC,aAAaC,QAAQ,WAAc,IAG5CC,EAAU,WAAM,MAMGC,qBAAWjD,EAAa,GAAI2C,GAN/B,mBAMjBxB,EANiB,KAMV+B,EANU,KASzBC,qBAAU,WACNL,aAAaM,QAAQ,QAASR,KAAKS,UAAUlC,MAC9C,CAACA,IAgCJ,OACI,6BACI,2CAAkBA,EAAMkB,OAAxB,OACA,6BAEA,yBAAKtB,UAAU,OAEX,yBAAKA,UAAU,SACX,kBAAC,EAAD,CACII,MAAOA,EACPP,gBArBI,SAAC0C,GAQrBJ,EANe,CACX/C,KAAK,SACLC,QAASkD,KAkBGzC,aAlCC,SAACyC,GASlBJ,EANe,CACX/C,KAAK,SACLC,QAASkD,QAiCL,yBAAKvC,UAAU,SACX,kBAAC,EAAD,CACIM,cA/CE,SAACiB,GACnBY,EAAU,CACN/C,KAAK,MACLC,QAASkC,WC1BrBiB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.38e6ce64.chunk.js","sourcesContent":["/**\r\n * REDUCER: Función que recibe un estado y una acción, y devuelve un nuevo estado\r\n * No puede:\r\n *              1. No debe llamar a otras funciones/effectos\r\n *              2. No debe realizar tareas asícronas\r\n *              3. Debe devolver un nuevo estado\r\n *              4. No debe llamar a \"localStage\" y ni a \"sessionStage\" por si ocurre algún fallo al guardar.\r\n *              5. No debe requerir más de una acción --> SOLO UNA.\r\n *              6. NO usar .push() porque modifica o muta el objeto, mejor el ...\r\n * \r\n *  const somethingReducer = ( state, action ) => {\r\n *      return state;\r\n *  }\r\n * \r\n */\r\n\r\n export const todoReducer = ( state = [], action ) => {\r\n\r\n    switch ( action.type ) {\r\n        case 'add':\r\n            return [...state, action.payload]\r\n\r\n        case 'delete':\r\n            return state.filter( todo => todo.id !== action.payload)\r\n\r\n        case 'toggle':\r\n            return state.map ( todo => (todo.id === action.payload ) ? { ...todo, done: !todo.done} : todo )\r\n    \r\n        // El default se llama cuando se inicializa\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\n\r\nexport const TodoListItem = ({ todo, index, handleClickTodo, handleDelete }) => {\r\n    return (\r\n        <li\r\n            key={todo.id}\r\n            className='list-group-item'\r\n        >\r\n            <p \r\n                className={ `${ todo.done && 'complete' }` } // si es true, devuelve 'complete'\r\n                onClick={ () => handleClickTodo(todo.id) }\r\n            > \r\n                { index + 1 } { todo.desc } \r\n            </p>\r\n\r\n            <button\r\n                className='btn btn-danger'\r\n                onClick={ () => handleDelete( todo.id ) }\r\n            >\r\n                Borrar\r\n            </button>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { TodoListItem } from './TodoListItem'\r\n\r\nexport const TodoList = ({ todos, handleClickTodo, handleDelete }) => {\r\n    return (\r\n        <ul className='list-group list-group-flush'>\r\n            {\r\n                todos.map( (todo, index) => (\r\n                    <TodoListItem \r\n                        key={index}\r\n                        todo={todo} \r\n                        index={index}\r\n                        handleClickTodo={handleClickTodo} \r\n                        handleDelete={handleDelete} \r\n                    />\r\n                ))\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useForm } from '../Hooks/useForm'\r\n\r\n// Cada cosa que esté relacionado con el form, deberá estar implementado aquí. TodoApp no necesita saber sobre handleSubmit o handleInputChange\r\nexport const TodoAddForm = ({ handleAddTodo }) => {\r\n\r\n    // Extraemos mediante desectructuración tanto la descripcion del formValue que nos devuelve, y el handleInputChange para cuando\r\n    // se modifica. El reset lo usaremos para reinicar los valores cuando presionemos enter\r\n    const [{description}, handleInputChange, reset] = useForm({\r\n        description:''\r\n    })\r\n\r\n    // Con este handle, controlamos al hacer el enter de nuestro formulario.\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        if ( description.trim().length <= 1 )\r\n            return;\r\n\r\n        // Creamos el nuevo todo\r\n        const newTodo = {\r\n            id: new Date().getTime(),\r\n            desc: description,\r\n            done: false\r\n        }\r\n\r\n        // Mandamos el nuevo Todo al app padre para que use el dispatch y añada al reducer usando la acción de añadir\r\n        handleAddTodo(newTodo)\r\n\r\n        // Reiniciamos los valores del formulario\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h4> Agregar TODO</h4>\r\n            <hr/>\r\n\r\n            <form onSubmit={ handleSubmit }>\r\n                <input\r\n                    type='text'\r\n                    className='form-control'\r\n                    name='description'\r\n                    placeholder='Aprender ...'\r\n                    value={description}\r\n                    onChange={handleInputChange}\r\n                />\r\n\r\n                <button \r\n                    type='submit'\r\n                    className='btn btn-outline-primary mt-1 btn-block'\r\n                >\r\n                    Agregar\r\n                </button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n","import { useState } from \"react\"\r\n\r\n// Recibirá un objeto que son los distintos campos que vamos a usar en el formulario\r\n// Podemos meter tanta funcionalidad como queramos que tenga el formulario, como validar el texto, etc...\r\nexport const useForm = ( initialState = {} ) => {\r\n\r\n    const [values, setValues] = useState(initialState)\r\n\r\n    const reset = () => {\r\n        setValues(initialState)\r\n    }\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value\r\n        })\r\n    }\r\n\r\n    return [ values, handleInputChange, reset ]\r\n}\r\n","import React, { useReducer, useEffect } from 'react'\r\nimport { todoReducer } from  './todoReducer'\r\n\r\nimport './styles.css'\r\nimport { TodoList } from './TodoList'\r\nimport { TodoAddForm } from './TodoAddForm'\r\n\r\nconst init = () => {\r\n\r\n    // Si exisaten todos guardados en el localStorage, devuelve esos todos. Sino, devuelve un estado inicial vacio\r\n    // Esto se ejecuta al crear el TodoApp al inicializar el useReducer.\r\n    return JSON.parse(localStorage.getItem('todos')) ||  []\r\n}\r\n\r\nexport const TodoApp = () => {\r\n\r\n    //const [state, dispatch] = useReducer(reducer, initialState, init)\r\n    // reducer es el reducer creado; el init es una función que inicializa el estado cuando hay muchas cosas a tener en cuenta\r\n    // el dispatch es el que va a disparar el redibujado cuando haya cambios en el state\r\n\r\n    const [ todos, dispatch ] = useReducer(todoReducer, [], init)\r\n\r\n    // Usamos el useEffect para controlar cuando cambian los todos. Cuando ocurra, guardaremos en el localStorage los todos\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos))\r\n    }, [todos])\r\n\r\n    const handleAddTodo = (newTodo) => {\r\n        dispatch( {\r\n            type:'add',\r\n            payload: newTodo\r\n        } )\r\n    }\r\n\r\n    const handleDelete = (todoId) => {\r\n\r\n        // Especificamos la acción\r\n        const action = {\r\n            type:'delete',\r\n            payload: todoId\r\n        }\r\n\r\n        // Usamos el dispatch para realizar la acción del reducer\r\n        dispatch( action )\r\n    }\r\n\r\n    const handleClickTodo = (todoId) => {\r\n        // Especificamos la acción\r\n        const action = {\r\n            type:'toggle',\r\n            payload: todoId\r\n        }\r\n\r\n        // Usamos el dispatch para realizar la acción del reducer\r\n        dispatch( action )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1> TodosApp ( { todos.length } ) </h1>\r\n            <hr/>\r\n\r\n            <div className='row'>\r\n\r\n                <div className='col-7' >\r\n                    <TodoList \r\n                        todos={todos} \r\n                        handleClickTodo={handleClickTodo} \r\n                        handleDelete={handleDelete}  \r\n                    />\r\n                </div>\r\n\r\n                <div className='col-5' >\r\n                    <TodoAddForm \r\n                        handleAddTodo = { handleAddTodo }\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { TodoApp } from './components/TodoApp';\r\n\r\nReactDOM.render(\r\n    <TodoApp />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}